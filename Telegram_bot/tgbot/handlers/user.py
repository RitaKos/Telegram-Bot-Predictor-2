from aiogram import Dispatcher, md
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import *
from random import Random, random, choice
from  pathlib import Path

topic1_list=[]
topic1_file_list= Path('video1') #write list to file
topic1_list_full=topic1_file_list.read_text().rsplit() # get list from file

topic2_list=[]
topic2_file_list= Path('video2') #write list to file
topic2_list_full=topic2_file_list.read_text().rsplit() # get list from file

topic3_list=[]
topic3_file_list= Path('video3') #write list to file
topic3_list_full=topic3_file_list.read_text().rsplit() # get list from file

topic4_list=[]
topic4_file_list= Path('video4') #write list to file
topic4_list_full=topic4_file_list.read_text().rsplit() # get list from file

new_list=[]


async def user_start(com: Message):
    '''
    Receive start command from user.
    Greeting user by name.
    :param command:
    :param message: str
    :return: str
    '''
    user_location = com.from_user.language_code
    if user_location == 'ru':
        await com.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {com.from_user.first_name}! \n–•–º..—Ç–∞–∫..—Ç–∞–∫... \n–ö–∞–∂–µ—Ç—Å—è, –∫–æ–º—É-—Ç–æ –Ω—É–∂–µ–Ω –º–æ–π —Å–æ–≤–µ—Ç. –ù–µ —Ç–∞–∫ –ª–∏? ")
    else:
        await com.answer(
        f"Hello, {com.from_user.first_name}! \nHm..Well, well.. \nI guess, you need my advice. Isn\'t it? ")


def register_user(dp: Dispatcher):
    '''
    Register massage with start command in handler
    :param dp:
    :return:
    '''
    dp.register_message_handler(user_start, commands=['start'], content_types=['text'], is_admin=False)


async def user_about(com: Message):
    '''
    Answer to /about command received by user
    :param com:
    :return:
    '''
    user_location = com.from_user.language_code
    if user_location == 'ru':
        await com.answer(
            '''–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç –æ—Ä–∞–∫—É–ª.
            –Ø –º–æ–≥—É –ø–æ—Å–º–æ—Ç–µ—Ç—å –≤ –±—É–¥—É—â–µ–µ –∏ –ø–æ–º–æ—á—å —Ç–µ–±–µ
            —Å —Ç—Ä—É–¥–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º. 
            –Ø –∑–Ω–∞—é –≤—Å–µ –æ–± —ç—Ç–æ–º –º–∏—Ä–µ, –Ω–æ –µ—Å–ª–∏ —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ –≤—Å–µ –∫–∞–∫ –µ—Å—Ç—å,
            —ç—Ç–æ –º–æ–∂–µ—Ç –ª–æ—Ö–æ —Å–∫–∞–∑–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–∞–ª—å—Ç–Ω–æ—Å—Ç–∏.
            –ù–æ... —è –º–æ–≥—É –¥–∞—Ç—å —Ç–µ–±–µ –Ω–µ–∫–æ—Ç—Ä—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ ;)
            –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –º–æ–∂–Ω–æ —á–µ—Ç—á–µ –≤ —Å–≤–æ–µ–π –≥–æ–ª–æ–≤–µ
            –∏ –≤—ã–±–µ—Ä–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–¥—è—â—É—é —Ç–µ–º—É –∏–∑ /topics .
            
            –ò –µ—â–µ.. –ù–µ –∑–∞–±—É–¥—å! –≠—Ç–æ –Ω–∞—à —Å —Ç–æ–±–æ–π —Å–µ–∫—Ä–µ—Ç ;)
            
            '''
        )
    else:
        await com.answer(
        '''Hello! I am bot-oracle.
        No,no..Not that Oracle.. :D
        
        I can look into the future and help you to make a decision.
        I know everything in this world, but if I tell you this information directly
        it might be dangerous for our reality.
        But I can give you some hints ;)
        Formulate your question in your head and choose the topic from /topics, 
        witch is more closer to your problem.
        
        And, hey... Don't forget! It's our secret ;)
        
        '''
    )


def register_about(dp: Dispatcher):
    '''
    Register massage with /about command in handler
    :param dp:
    :return:
    '''
    dp.register_message_handler(user_about, commands=['about'], content_types=['text'], is_admin=False)


async def user_topics(com: Message):
    '''
    Send topics list to user
    :param com:
    :return:
    '''
    topics = ['/topic1', '/topic2', '/topic3', '/topic4']
    user_location = com.from_user.language_code
    if user_location == 'ru':
        await com.answer(md.text(md.bold('–ò—Ç–∞–∫, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å?'),
                                 md.text('üî∏', md.bold('–î–µ–ª–∞—Ç—å –∏–ª–∏ –Ω–µ –¥–µ–ª–∞—Ç—å:'), md.code(topics[0])),
                                 md.text('üî∏', md.bold('–ß—Ç–æ –∂–¥–µ—Ç –≤–ø–µ—Ä–µ–¥–∏:'), md.code(topics[1])),
                                 md.text('üî∏', md.bold('–í–æ–ø—Ä–æ—Å –æ –Ω–µ–∫–æ—Ç–æ—Ä–æ–º —á–µ–ª–æ–≤–µ–∫–µ:'), md.code(topics[2])),
                                 md.text('üî∏', md.bold('–ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å –≤ —Å–∏—Ç—É–∞—Ü–∏–∏:'), md.code(topics[3])),
                                 sep='\n',
                                 ))
    else:
        await com.answer(md.text(md.bold('What you want to know?'),
                     md.text('üî∏', md.bold('Do or not to do:'), md.code(topics[0])),
                     md.text('üî∏', md.bold('What is behind:'), md.code(topics[1])),
                     md.text('üî∏', md.bold('About some person:'), md.code(topics[2])),
                     md.text('üî∏', md.bold('What do you need:'), md.code(topics[3])),
                     sep='\n',
                     ))


def register_topics(dp: Dispatcher):
    '''
    Register massage with /topics command in handler
    :param dp:
    :return:
    '''
    dp.register_message_handler(user_topics, commands=['topics'], content_types=['text'], is_admin=False)

async def get_file_id(f: Message):
    '''
    Get file_id from received video1, add it to list
    :param f: Massage
    :return: str
    '''
    file = str(f.video.file_id)
    if  str(f.caption) == 't1':
            topic1_list.append(file)
            try:
                topic1_file_list.write_text('\n'.join(topic1_list))
                await f.answer(f'File {file} is added to the list 1')
            except FileNotFoundError:
                await f.answer('Not found file for writing')
            finally:
                return file

    if  str(f.caption) =='t2':
            topic2_list.append(file)
            try:
                topic2_file_list.write_text('\n'.join(topic2_list))
                await f.answer(f'File {file} is added to the list 2')
            except FileNotFoundError:
                await f.answer('Not found file for writing')
            finally:
                return file

    if  str(f.caption) == 't3':
            topic3_list.append(file)
            try:
                topic3_file_list.write_text('\n'.join(topic3_list))
                await f.answer(f'File {file} is added to the list 3')
            except FileNotFoundError:
                await f.answer('Not found file for writing')
            finally:
                return file

    if  str(f.caption) == 't4':
            topic4_list.append(file)
            try:
                topic4_file_list.write_text('\n'.join(topic4_list))
                await f.answer(f'File {file} is added to the list 4')
            except FileNotFoundError:
                await f.answer('Not found file for writing')
            finally:
                return file
    else:
            await f.answer(f'File {file} topic is not defined')
    return file


def register_file(dp: Dispatcher):
    '''
    Admin send video1 for getting file_id
    :param dp:
    :return:
    '''
    dp.register_message_handler(get_file_id, content_types=['video'])

async def cmd_topic1(mes: Message):
    '''
    Send answer to user according his request (topic1).
    Choice is random from local storage.
    :param mes:
    :return:
    '''
    user_location = mes.from_user.language_code
    if user_location == 'ru':
        answer = choice(topic1_list_full)
        await mes.answer_video(video=answer,protect_content=True)
    else: pass

def register_topic1(dp: Dispatcher):
    '''
    Register massage with /topic1 command in handler
    :param dp:
    :return:
    '''
    dp.register_message_handler(cmd_topic1, commands=['topic1'], content_types=['text'])

async def get_text_message(message: Message):
    '''
    Receive text message from user and answer.
    :param message: str
    :return: str
    '''

    if message.text.lower() in {'hi', 'hello', 'good afternoon', 'good morning', 'good evening'}:
        return await message.answer('Hello!!!You looking great today!')
    if message.text.lower() in {'–ø—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤–µ—Ç–∏–∫', '–∑–¥–∞—Ä–æ–≤–∞', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '—Å–∞–ª—é—Ç','—Ö–∞–π'}:
        return await message.answer('–û–π, –ø—Ä–∏–≤–µ—Ç! –¢—ã –≤—ã–≥–ª—è–¥–∏—à—å —Å—É–ø–µ—Ä —Å–µ–≥–æ–¥–Ω—è!')

    if message.text.lower() in {'thank', 'thanks', 'thank you', 'thnks'}:
        return await message.reply(
            '''You are welcome! 
        
        And now let\'s try to find answers! 
        Choose the /topics, which is much closer to you problem'''
        )
    if message.text.lower() in {'—Å–ø–∞—Å–∏–±–æ', '–ø–∞—Å–∏–±', '–º–∏–ª–æ', '—Å–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç', '—Å–ø—Å'}:
        return await message.answer(
            '''–û–±—Ä–∞—â–∞–π—Å—è) 
    
                    –ê —Å–µ–π—á–∞—Å –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã! 
                    –í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å –∏–∑ /topics, –∫–æ—Ç–æ—Ä—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–æ–∫ –∫ —Ç–≤–æ–µ–º—É –≤–æ–ø—Ä–æ—Å—É'''
        )

    if message.text.lower() in {'you too', 'u too', 'and you too'}:
        return await message.reply(
            '''Thanks, I know it ))
        
        And now let\'s try to find answers!
        Choose the /topics, which is much closer to you problem'''
        )
    if message.text.lower() in {'–∏ —Ç—ã', '—Ç—ã —Ç–æ–∂–µ', '–∏ —Ç—ã –Ω–∏—á–µ–≥–æ', '–∏ —Ç—ã —Ç–æ–∂–µ'}:
        return await message.reply(
            '''–°–ø–∞—Å–∏–±–æ, —è –≤ –∫—É—Ä—Å–µ ))

        –ê —Å–µ–π—á–∞—Å –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã! 
        –í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å –∏–∑ /topics, –∫–æ—Ç–æ—Ä—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–æ–∫ –∫ —Ç–≤–æ–µ–º—É –≤–æ–ø—Ä–æ—Å—É'''
        )
    if message.text.lower() in {'yes', 'ok', 'yep', 'I do', 'it is', 'right guess', 'u guess', 'you guess'}:
        return await message.answer(
            ''' Good !
            Let\'s try to find answers! Choose the /topics, which is much closer to you problem ''')
    if message.text.lower() in {'–¥–∞', '–æ–∫', '–∞–≥–∞', '–º–æ–∂–µ—Ç –±—ã—Ç—å', '–Ω–∞–≤–µ—Ä–Ω–æ–µ', '–≤–æ–∑–º–æ–∂–Ω–æ', '—É–≥–∞–¥–∞–ª', '–≤–µ—Ä–Ω–æ'}:
        return await message.answer(
            ''' –û—Ç–ª–∏—á–Ω–æ !
                –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã! 
                –í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å –∏–∑ /topics, –∫–æ—Ç–æ—Ä—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–æ–∫ –∫ —Ç–≤–æ–µ–º—É –≤–æ–ø—Ä–æ—Å—É ''')
    else:
        user_location = message.from_user.language_code
        if user_location == 'ru':
            return await message.reply(
                '''–î–∞–≤–∞–π-–∫–æ –æ–± —ç—Ç–æ–º –ø–æ–±–æ–ª—Ç–∞–µ–º –ø–æ–∑–∂–µ? 

                –ê —Å–µ–π—á–∞—Å –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã! 
                –í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å –∏–∑ /topics, –∫–æ—Ç–æ—Ä—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±–ª–∏–∑–æ–∫ –∫ —Ç–≤–æ–µ–º—É –≤–æ–ø—Ä–æ—Å—É.

                –•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –æ–±–æ –º–Ω–µ –ø–æ–±–æ–ª—å—à–µ, –∫–ª–∏–∫–Ω–∏ /about ''')
        else:
            return await message.reply(
            '''I would talk about it another time, ok? 
            
            And now let\'s try to find answers! Choose the /topics, which is much closer to you problem.
            
            Have any questions? Click /about ''')


def register_user_mess(dp: Dispatcher):
    dp.register_message_handler(get_text_message, content_types=['text'], is_admin=False)

